<template>
  <view
    c-if="{{visible}}"
    class="h-popup-manager {{ visible ? 'h-popup-manager--show' : '' }} h-popup-manager--{{position === 'center' ? 'center' : 'full'}}"
  >
    <view
      c-if="{{mask}}"
      class="h-popup-manager-mask is-transition {{ transitionIn ? 'is-in' : 'is-leave' }}"
      style="z-index:{{zIndex}};"
      c-bind:tap="closeevent"
    ></view>
    <!-- c-catch禁止事件冒泡 -->
    <view
      class="h-popup-manager-content is-transition {{ transitionIn ? 'is-in' : 'is-leave' }} {{ position ? 'h-popup-manager-content--' + position : 'h-popup-manager-content--center' }}"
      style="z-index:{{zIndex+1}};{{caculateStyle}}"
      c-bind:tap="closeevent"
    >
      <view c-catch:tap="contentTap">
        <slot></slot>
      </view>
    </view>
  </view>
</template>
<script>
let zindexManager = 1000
import componentMixin from '../../core/mixins/component/index.js'
import ViewportDifferenceInterface from './diffrence.interface'
class HPopupManager implements HPopupManagerInterface {
  name = 'h-popup-manager'
  mixins = componentMixin
  props = {
    mask: {
      type: Boolean,
      default: true
    },
    show: {
      type: Boolean,
      default: false
    },
    position: {
      type: String,
      default: 'center'
    },
    top: {
      type: [String, Number],
      default: 0
    },
    left: {
      type: [String, Number],
      default: 0
    },
    bottom: {
      type: [String, Number],
      default: 0
    },
    right: {
      type: [String, Number],
      default: 0
    }
  }
  data = {
    transitionIn: false,
    visible: false,
    zIndex: 1000
  }
  watch = {
    show() {
      this.toggle()
    }
  }
  computed = {
    caculateStyle() {
      const positions = {
        top: `top:${this._calcTop(parseInt(this.top))}cpx;`,
        bottom: `bottom:${this._calcBottom(parseInt(this.bottom))}cpx;`,
        left: `left:${this.left}cpx;`,
        right: `right:${this.right}cpx;`,
        center: ''
      }
      return positions[this.position] || positions.center
    }
  }
  mounted() {
    this.toggle()
  }
  methods = {
    toggle() {
      this.show ? this.showPopup() : this.hidePopup()
    },
    closeevent() {
      this.$cmlEmit('onclose')
    },
    showPopup() {
      ViewportDifferenceInterface.moveNode(true, this.$el)
      zindexManager = zindexManager + 2
      this.zIndex = zindexManager
      this.visible = true
      this._setTimeout(() => {
        this.transitionIn = true
      }, 50)
    },
    hidePopup() {
      this.transitionIn = false
      this._setTimeout(() => {
        this.visible = false
        ViewportDifferenceInterface.moveNode(false, this.$el)
      }, 300)
    },
    contentTap() {

    }
  }
}
export default new HPopupManager()
</script>

<style lang="scss">
@import "./h-popup-manager.scss";
</style>

<script cml-type="json">
{
  "base": {
    "component": true,
    "usingComponents": {
      "h-fixed": "../h-fixed/h-fixed"
    }
  }
}
</script>
