<template>
  <view class="h-checkbox">
    <view class="h-checkbox-wrap {{checkClass}}" c-bind:tap="changeCheck">
      <block c-if="{{disabled || innerChecked}}">
        <h-icon class="h-checkbox-select" name="iconyigouxuanbeifen"></h-icon>
      </block>
      <block c-else>
        <h-icon class="h-checkbox-select" name="iconbukegouxuanbeifen1"></h-icon>
      </block>
      <text class="h-checkbox-label" c-if="{{label}}">{{ label }}</text>
    </view>
  </view>
</template>
<script>
class HCheckbox implements HCheckboxInterface {
  name = 'h-checkbox'
  props = {
    checked: {
      type: Boolean,
      default: false
    },
    label: {
      type: String
    },
    disabled: {
      type: Boolean,
      default: false
    },
    position: {
      type: String,
      default: 'left'
    },
    groupIndex: {
      type: Number,
      default: -1
    }
  }
  data = {
    innerChecked: false
  }
  computed = {
    checkClass() {
      if (this.disabled) {
        return 'is-disabled'
      }
      return this.innerChecked ? 'is-active' : ''
    }
  }
  watch = {
    checked(newChecked) {
      this.innerChecked = newChecked
    }
  }
  methods = {
    changeCheck() {
      if (this.disabled) return
      this.innerChecked = !this.innerChecked
      const value = {
        value: this.innerChecked
      }
      if (this.groupIndex !== -1) {
        value.index = this.groupIndex
      }
      this.$cmlEmit('changeevent', value)
      this.$cmlEmit('change', value)
    }
  }
  mounted() {
    const { checked } = this
    this.innerChecked = checked
  }
}
export default new HCheckbox()
</script>
<style lang="scss">
@import "./h-checkbox.scss";
</style>

<script cml-type="json">
{
  "base": {
    "usingComponents": {
      "h-icon": "../h-icon/h-icon"
    },
    "component": true
  }
}
</script>
