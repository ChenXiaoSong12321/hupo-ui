<template>
  <h-popup-manager show="{{ show }}" position="center">
    <view class="h-dialog--container">
      <view c-if="{{ title }}" class="h-dialog-header">
        <view
          class="h-dialog-header--icon"
          c-if="{{icon}}"
          style="color: {{ iconColor || '#333' }}"
        >
          <h-icon name="{{icon}}"></h-icon>
        </view>
        <view class="h-dialog-header--title">{{ title }}</view>
      </view>
      <view class="h-dialog-content {{ title ? 'is-has-title' : '' }}">
        <view class="h-dialog-content--message">
          <h-rich-text document="{{message}}"></h-rich-text>
          <!-- {{message}} -->
        </view>
      </view>
      <view class="h-dialog-footer">
        <h-button
          c-for="{{ buttons }}"
          c-key="{{ index }}"
          size="medium"
          type="none"
          class="h-dialog-footer-button-no-type {{item.type!=='confirm'?'is-cancel':''}}"
          customStyle="{{buttons.length!==2?'width:480cpx':''}}"
          data-open-type="{{ item.openType }}"
          data-type="{{ item.type }}"
          open-type="{{ item.openType }}"
          c-bind:onclick="handleButtclick(item)"
          c-bind:getuserinfo="handleUserInfoResponse"
          c-bind:getphonenumber="handlePhoneResponse"
          c-bind:opensetting="handleOpenSettingResponse"
        >
          <view
            class="button-text {{item.type==='confirm'?'is-confirm':'is-cancel'}}"
          >{{ item.text }}</view>
        </h-button>
      </view>
    </view>
  </h-popup-manager>
</template>
<script>
import { primaryColor, fontColorC1 } from "../../assets/config/style.var.js";
import component from "../../core/mixins/component.js";
import authorize from "./authorize.interface";

const needResponseOpenTypes = ["getUserInfo", "getPhoneNumber", "openSetting"];

class HDialog {
  props = {};
  data = {
    // 标题
    title: "",
    // 自定义 btn 列表
    // { type: 按钮类型，回调时以此作为区分依据，text: 按钮文案, color: 按钮文字颜色, openType: 微信开放能力 }
    buttons: [],
    // 内容
    message: " ",
    // 选择节点
    selector: "h-dialog",
    // 是否展示确定
    showConfirmButton: true,
    // 确认按钮文案
    confirmButtonText: "确定",
    // 确认按钮颜色
    confirmButtonColor: primaryColor,
    // 是否展示取消
    showCancelButton: false,
    // 取消按钮文案
    cancelButtonText: "取消",
    // 取消按钮颜色
    cancelButtonColor: fontColorC1,
    key: "",
    autoClose: true,
    icon: "",
    iconColor: "",
    show: false
  };
  methods = {
    handleButtclick(event) {
      // 获取当次弹出框的信息
      const { type = "", openType = "" } = event;
      // 重置展示
      if (this.autoClose) {
        this.show = false;
      }
      // 自定义按钮，全部 resolve 形式返回，根据 type 区分点击按钮
      const isNeedOpenDataButton = needResponseOpenTypes.indexOf(openType) > -1;
      // 如果需要 openData，就额外返回一个 promise，用于后续 open 数据返回
      if (isNeedOpenDataButton) {
        if (type !== "confirm") {
          this.selfEmit("cancel", {});
        }
        return;
      }
      // 默认按钮，确认为 resolve，取消为 reject
      if (type === "confirm") {
        this.selfEmit("confirm", {});
      } else {
        this.selfEmit("cancel", {});
      }
    },

    selfEmit(type, data) {
      this.show = false;
      this.$cmlEmit(type, data);
    },

    // 以下为处理微信按钮开放能力的逻辑
    handleUserInfoResponse(event) {
      const detail = event.detail;
      const type = authorize.filterType(detail, "getUserInfo");
      this.__handleOpenDataResponse({
        type,
        data: detail
      });
    },
    handlePhoneResponse(event) {
      const detail = event.detail;
      const type = authorize.filterType(detail, "getPhoneNumber");

      this.__handleOpenDataResponse({
        type,
        data: detail
      });
    },
    handleOpenSettingResponse(event) {
      const detail = event.detail;
      const type = authorize.filterType(detail, "openSetting");

      this.__handleOpenDataResponse({
        type,
        data: detail
      });
    },
    __handleOpenDataResponse(options) {
      const type = options.type || "confirm";
      const data = options.data || {};
      this.selfEmit(type, data);
    }
  };
}

// export default component(HDialog)
export default new HDialog();
</script>
<style lang="scss">
@import "./h-dialog.scss";
</style>
<script cml-type="json">
{
  "base": {
    "usingComponents": {
      "h-popup-manager": "../h-popup-manager/h-popup-manager",
      "h-icon": "../h-icon/h-icon",
      "h-rich-text": "../h-rich-text/h-rich-text",
      "h-button": "../h-button/h-button"
    },
    "component": true
  }
}
</script>
