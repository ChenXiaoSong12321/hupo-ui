<template>
  <view class="h-stepper">
    <h-button
      throttle="{{false}}"
      class="h-stepper-subtract {{disabled || (stepValue === min) ? 'is-disabled':''}}"
      type="none"
      c-bind:onclick="onChange('subtract')"
    >
      <view class="text">-</view>
    </h-button>
    <view class="h-stepper-input-wrap">
      <input
        class="h-stepper-input"
        placeholder
        value="{{stepValue}}"
        cStyle="{{inputStyle}}"
        c-bind:input="inputChanged"
      />
    </view>
    <h-button
      throttle="{{false}}"
      class="h-stepper-add {{disabled || (stepValue === max) ? 'is-disabled':''}}"
      type="none"
      c-bind:onclick="onChange('add')"
    >
      <view class="text">+</view>
    </h-button>
  </view>
</template>

<script>
const MAX = 2147483647

class HStepper implements HStepperInterface {
  name = 'h-stepper'
  props = {
    integer: Boolean,
    disabled: Boolean,
    disableInput: Boolean,
    value: {
      type: Number,
      default: 1
    },
    min: {
      type: null,
      default: 1
    },
    max: {
      type: null,
      default: MAX
    },
    step: {
      type: null,
      default: 1
    }
  }
  data = {
    stepValue: 1
  }
  computed = {
    inputStyle() {
      return `
      border: none;
      font-size: 22cpx;
      height: 38cpx;
      min-height: 0;
      line-height: 38cpx;
      text-align:center;
      padding:0 2cpx;
      width: 42cpx;
      color: #666666;
      outline: none;
     `
    }
  }
  watch = {
    value: 'setValue',
    stepValue(n) {
      if (n !== this.value) {
        this.$cmlEmit('change', { value: n })
        this.$cmlEmit('input', { value: n })
      }
    },
    min(val) {
      if (!!val && this.stepValue < val) {
        this.setValue(val)
      }
    },
    max(val) {
      if (!!val && this.stepValue > val) {
        this.setValue(val)
      }
    }
  }
  mounted() {
    if (this.stepValue < this.min) this.setValue(this.min)
  }
  methods = {
    setValue(val) {
      if (!val)val = this.min
      if (val < this.min || val > this.max) {
        this.$cmlEmit('overlimit')
        return
      }
      this.stepValue = val
    },
    inputChanged(e) {
      this.setValue(e.detail)
    },
    onChange(type) {
      const diff = type === 'subtract' ? -this.step : +this.step
      const stepValue = Math.round((Number(this.stepValue) + diff) * 100) / 100
      this.setValue(stepValue)
      this.$cmlEmit(type)
    }
  }
}
export default new HStepper()
</script>

<style lang="scss">
@import "../../assets/scss/_output.scss";
@import "./h-stepper.scss";
</style>

<script cml-type="json">
{
  "base": {
    "usingComponents": {
      "h-button": "../h-button/h-button"
    },
    "component": true
  }
}
</script>
