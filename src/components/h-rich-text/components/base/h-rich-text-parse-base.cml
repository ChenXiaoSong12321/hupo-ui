<template>
  <view>
    <block c-if="{{nodes.node == 'element'}}">
      <block c-if="{{ nodes.tag == 'video' || nodes.tag == 'embed' || nodes.tag == 'img' || nodes.tag == 'br' || nodes.tag == 'button' || nodes.tag == 'li' || nodes.tag == 'a' || nodes.tag == 'table' || nodes.tag == 'tr' }}">
        <h-rich-text-parse-video c-if="{{nodes.tag == 'video' || nodes.tag == 'embed'}}" nodes="{{nodes}}"></h-rich-text-parse-video>
        <h-rich-text-parse-img c-if="{{nodes.tag == 'img'}}" nodes="{{nodes}}"></h-rich-text-parse-img>
        <h-rich-text-parse-br c-if="{{nodes.tag == 'br'}}" nodes="{{nodes}}"></h-rich-text-parse-br>
        <h-rich-text-parse-button c-if="{{nodes.tag == 'button'}}" nodes="{{nodes}}"></h-rich-text-parse-button>
        <h-rich-text-parse-li c-if="{{nodes.tag == 'li'}}" nodes="{{nodes}}"></h-rich-text-parse-li>
        <h-rich-text-parse-a c-if="{{nodes.tag == 'a'}}" nodes="{{nodes}}"></h-rich-text-parse-a>
        <h-rich-text-parse-table c-if="{{nodes.tag == 'table'}}" nodes="{{nodes}}"></h-rich-text-parse-table>
        <h-rich-text-parse-tr c-if="{{nodes.tag == 'tr'}}" nodes="{{nodes}}"></h-rich-text-parse-tr>
      </block>
      <block c-else-if="{{nodes.tagType == 'block'}}">
        <h-rich-text-parse-block nodes="{{nodes}}"></h-rich-text-parse-block>
      </block>
      <block c-else>
        <h-rich-text-parse-inline nodes="{{nodes}}"></h-rich-text-parse-inline>
      </block>
    </block>
    <block c-else-if="{{nodes.node == 'text'}}">
      <h-rich-text-parse-text nodes="{{nodes}}"></h-rich-text-parse-text>
    </block>
  </view>
</template>
<script>
class HRichTextParseBase {
  props= {
    nodes: {
      type: Object,
      default(){return {}}
    }
  }
}
export default new HRichTextParseBase();
</script>

<style lang="scss">
@import '../common.scss';
</style>

<script cml-type="json">
{
  "base": {
    "component": true,
    "usingComponents": {
      "h-rich-text-parse-a": "../a/h-rich-text-parse-a",
      "h-rich-text-parse-block": "../block/h-rich-text-parse-block",
      "h-rich-text-parse-br": "../br/h-rich-text-parse-br",
      "h-rich-text-parse-button": "../button/h-rich-text-parse-button",
      "h-rich-text-parse-img": "../img/h-rich-text-parse-img",
      "h-rich-text-parse-inline": "../inline/h-rich-text-parse-inline",
      "h-rich-text-parse-li": "../li/h-rich-text-parse-li",
      "h-rich-text-parse-table": "../table/h-rich-text-parse-table",
      "h-rich-text-parse-tr": "../tr/h-rich-text-parse-tr",
      "h-rich-text-parse-text": "../text/h-rich-text-parse-text",
      "h-rich-text-parse-video": "../video/h-rich-text-parse-video"
    }
  }
}
</script>
