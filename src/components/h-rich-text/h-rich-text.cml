<template>
  <view class="h-rich-text">
    <view class="wxParse">
      <block wx:for="{{_nodes}}" wx:key="{{index}}">
        <block wx:for="{{item}}" wx:for-item="node" wx:for-index="y" wx:key="{{node.index}}">
          <h-rich-text-parse-base nodes="{{node}}"></h-rich-text-parse-base>
        </block>
      </block>
    </view>
  </view>
</template>
<script>
class HRichText {
  props= {
    document: {
      type: String,
      value: '',
      observer() {
        this.parse()
      }
    },
    type: {
      type: String,
      value: 'html'
    },
    renderNum: {
      type: Number,
      value: 5
    }
  },
  data= {
    nodes: [],
    _nodes: []
  },
  methods= {
    async parse() {
      if (!this.data.document) return
      const parsedData = wxParse(this.data.document)
      this.nodes = parsedData.nodes
      this.init()
    },
    async init() {
      const _nodes = new Map()
      const nodes = this.data.nodes
      const renderNum = this.data.renderNum
      if (nodes.length > renderNum) {
        for (let i = 0, len = nodes.length; i < len; i += renderNum) {
          const index = parseInt(i / renderNum)
          const item = nodes.slice(i, i + renderNum)
          _nodes.set(index, item)
        }
      } else {
        _nodes.set(0, nodes)
      }
      for (const [index, item] of _nodes) {
        this[`_nodes[${index}]`] = item
        // await wxTools.$nextTick(300)
        // await this.delay(200)
      }
      this.$cmlEmit('success')
    }
  }
}
export default new HRichText();
</script>
<style lang="scss">
@import './h-rich-text.scss';
</style>
<script cml-type="json">
{
  "base": {
    "usingComponents": {
      "h-rich-text-parse-base": "../components/base/index"
    },
    "component": true
  }
}
</script>


