<template>
  <view class="h-rich-text">
    <view class="wxParse">
      <block c-for="{{selfNodes}}" c-key="{{index}}">
        <block c-for="{{item}}" c-for-item="node" c-for-index="y" c-key="{{node.index}}">
          <h-rich-text-parse-base nodes="{{node}}"></h-rich-text-parse-base>
        </block>
      </block>
    </view>
  </view>
</template>
<script>
import wxParse from '../../assets/js/wxParse/index.js'
class HRichText {
  props= {
    document: {
      type: String,
      default: ''
    },
    type: {
      type: String,
      default: 'html'
    },
    renderNum: {
      type: Number,
      default: 5
    }
  }
  data= {
    nodes: [],
    selfNodes: []
  }
  watch={
    document(){
      this.parse()
    }
  }
  methods= {
    async parse() {
      if (!this.document) return
      const parsedData = wxParse(this.document)
      this.nodes = parsedData.nodes
      this.init()
    },
    async init() {
      const selfNodes = new Map()
      const nodes = this.nodes
      const renderNum = this.renderNum
      if (nodes.length > renderNum) {
        for (let i = 0, len = nodes.length; i < len; i += renderNum) {
          const index = parseInt(i / renderNum)
          const item = nodes.slice(i, i + renderNum)
          selfNodes.set(index, item)
        }
      } else {
        selfNodes.set(0, nodes)
      }
      for (const [index, item] of selfNodes) {
        this.selfNodes[`${index}]`] = item
        // await wxTools.$nextTick(300)
        // await this.delay(200)
      }
      this.$cmlEmit('success')
    }
  }
}
export default new HRichText();
</script>
<style lang="scss">
@import './h-rich-text.scss';
</style>
<script cml-type="json">
{
  "base": {
    "usingComponents": {
      "h-rich-text-parse-base": "./components/base/h-rich-text-parse-base"
    },
    "component": true
  }
}
</script>


