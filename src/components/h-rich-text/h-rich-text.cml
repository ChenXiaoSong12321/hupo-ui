<template>
  <view class="h-rich-text">
    <view class="wxParse">
      <block c-for="{{selfNodes}}">
        <block c-for="{{item}}" c-for-item="node" c-for-index="y">
          <h-rich-text-parse-base
            nodes="{{node}}"
            c-key="{{node.node + node.tag + node.tagType + y}}"
          ></h-rich-text-parse-base>
        </block>
      </block>
    </view>
  </view>
</template>
<script>
import wxParse from './wxParse/index.js'
import difference from '../../core/difference/difference.interface'
import {promise} from "@hupo/core";
import componentMixin from '../../core/mixins/component/index.js'

class HRichText {
  name = 'h-rich-text'
  mixins = [...componentMixin]
  props = {
    document: {
      type: String,
      default: ''
    },
    renderNum: {
      type: Number,
      default: 5
    }
  }
  data = {
    selfNodes: []
  }
  watch = {
    document(){
      this.parse()
    }
  }
  mounted() {
    this.parse()
  }
  methods = {
    async parse() {
      if (!this.document) return
      const parsedData = wxParse(this.document)
      this.init(parsedData.nodes)
    },
    async init(nodes) {
      // const selfNodesArray = []
      const selfNodes = new Map()
      const renderNum = this.renderNum
      if (nodes.length > renderNum) {
        for (let i = 0, len = nodes.length; i < len; i += renderNum) {
          const index = parseInt(i / renderNum)
          const item = nodes.slice(i, i + renderNum)
          selfNodes.set(index, item)
        }
      } else {
        selfNodes.set(0, nodes)
      }
      this.selfNodes = []
      for (const [index, item] of selfNodes) {
        this.selfNodes.push(item)
        await difference.nextTick(300)
        await promise.delay(200)
      }
      this.$cmlEmit('success')
    }
  }
}
export default new HRichText()
</script>
<style lang="scss">
@import "./h-rich-text.scss";
</style>
<script cml-type="json">
{
  "base": {
    "usingComponents": {
      "h-rich-text-parse-base": "./components/base/h-rich-text-parse-base"
    },
    "component": true
  }
}
</script>


