<template>
  <view
    c-if="{{show}}"
    class="h-popup {{ show ? 'h-popup-wrap--show' : '' }}"
    style="{{containerStyle}}"
  >
    <view
      class="h-popup--mask {{mask?'h-popup--has-mask':''}} {{ transitionIn ? 'h-popup--in' : 'h-popup--leave' }}"
      c-bind:tap="closeevent"
    ></view>
    <!-- c-catch禁止事件冒泡 -->
    <view
      class="h-popup--content {{ transitionIn ? 'h-popup--in' : 'h-popup--leave' }} {{ position ? 'h-popup--' + position : 'h-popup--center' }}"
      style="{{contentStyle}}"
      c-catch:tap="contentTap"
    >
      <slot></slot>
    </view>
  </view>
</template>
<script>
class CPopup {
  props = {
    mask: {
      type: Boolean,
      default: true
    },
    show: {
      type: Boolean,
      default: false
    },
    center: {
      type: Boolean,
      default: true
    },
    position: {
      type: String,
      default: ""
    }
  };

  data = {
    transitionIn: false
  };

  computed = {
    containerStyle() {
      let s = "";

      if (this.center) {
        s += "align-items:center;justify-content:center;";
      }

      return s;
    },
    contentStyle() {
      let style = "position: absolute;left:0;right:0;top:0;bottom:0;";
      switch (this.position) {
        case "top":
          style = style.replace("bottom:0;","display:flex;flex-direction:column;");
          break;
        case "right":
          style = style.replace("left:0;", "display:flex;flex-direction:row;");
          break;
        case "bottom":
          style = style.replace("top:0;","display:flex;flex-direction:column;");
          break;
        case "left":
          style = style.replace("right:0;", "display:flex;flex-direction:row;");
          break;
        default:
          style = "position:relative;";
          break;
      }
      return style;
    }
  };

  watch = {
    show(value) {
      value ? this.showMask() : this.hideMask();
    }
  };

  methods = {
    closeevent() {
      this.$cmlEmit("close");
    },
    showMask() {
      this.show = true;
      setTimeout(() => {
        this.transitionIn = true;
      }, 50);
    },
    hideMask() {
      this.transitionIn = false;
      setTimeout(() => {
        this.show = false;
      }, 300);
    },
    contentTap() {}
  };
}

export default new CPopup();
</script>

<style lang="less">
@import "./h-popup-manager.less";
</style>
<script cml-type="json">
{
  "base": {
    "component": true
  }
}
</script>
