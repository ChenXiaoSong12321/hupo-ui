<template>
  <view class="h-image">
    <block c-if="{{status == 'load-complete'}}">
      <view class="h-image-loaded">
        <h-image-origin class="image" src="{{url}}" mode="{{mode}}"></h-image-origin>
      </view>
    </block>
    <block c-else-if="{{status == 'load-refresh'}}">
      <view class="h-image-load-fail" c-bind:tap="reloadImage">
        <h-icon name="el-icon-hp-shuaxin"></h-icon>
      </view>
    </block>
    <block c-else-if="{{status == 'load-fail'}}">
      <view class="h-image-loading h-image-loading--{{mode}}">
        <h-image-origin class="image" src="{{unloadImg}}" mode="widthFix"></h-image-origin>
      </view>
    </block>
    <block c-else>
      <view class="h-image-loading h-image-loading--{{mode}}">
        <h-image-origin class="image" src="{{unloadImg}}" mode="widthFix"></h-image-origin>
      </view>
      <!-- 隐藏的image，用于隐士加载 -->
      <h-image-origin
        class="h-image-hidden"
        c-if="{{show || !lazyLoad}}"
        src="{{url}}"
        mode="{{mode}}"
        c-bind:onload="__imageOnLoad"
        c-bind:onerror="__imageOnLoadError"
      ></h-image-origin>
    </block>
  </view>
</template>

<script>
import HImageMixins from "./h-image.mixins.js";
import {wxTools} from "@hupo/core";
import oprateUrl from '../../core/utils/url.js'
import componentMixin from "../../core/mixins/component/index.js";

class HImage implements HImageInterface {
  mixins = [componentMixin,HImageMixins]
  async created() {
    this.init();
    if (this.lazyLoad) {
      await this.$relativeToViewport(".h-image");
    }
    this.show = true;
  }
  methods = {
    async $relativeToViewport(selector, bottom = 50) {
      return new Promise((resolve, reject) => {
        if (!selector) reject("no selector");
        let observer = this.createIntersectionObserver()
        observer.relativeToViewport({ bottom }).observe(selector, res => {
          observer.disconnect();
          resolve({
            res
          });
        });
      });
    }
  }
  pageLifetimes = {
    async show() {
      if (this.status == "load-fail") {
        this.status = "loading";
        await this.$relativeToViewport(".h-image");
        this.reloadImage();
      }
    }
  }
}

export default new HImage()
</script>

<style lang="scss">
@import "./h-image.scss";
</style>

<script cml-type="json">
{
  "base": {
    "usingComponents": {
      "h-icon": "../h-icon/h-icon",
      "h-image-origin": "../h-image-origin/h-image-origin"
    },
    "component": true
  }
}
</script>
